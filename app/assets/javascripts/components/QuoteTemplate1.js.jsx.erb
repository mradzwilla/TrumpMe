var QuoteTemplate1 = React.createClass({

	_copyToImage: function(){
		var can = this.refs.canvas;
		var dataURL = can.toDataURL();

		var canvasImg = this.refs.canvasImage
		canvasImg.src = dataURL
	},

	_draw: function(callback){

		console.log('start drawing')
		var draw = function(){

			context.font = "38px Sans Serif";
			context.fillStyle = "#ffffff";
			context.drawImage(objectImg, 0, 0);
		}

		var wrapText =  function(context, text) {
		    var words = text.split(' ');
		    var line = '';
	        var x = 90
	        var y = 68
	        var maxWidth = 600
	        var lineHeight = 36

		    for(var n = 0; n < words.length; n++) {
		      var testLine = line + words[n] + ' ';
		      var metrics = context.measureText(testLine);
		      var testWidth = metrics.width;
		      if (testWidth > maxWidth && n > 0) {
		        context.fillText(line, x, y);
		        line = words[n] + ' ';
		        y += lineHeight;
		        if (y >= 148){
	            	maxWidth = 320
	            }
		      }
		      else {
		        line = testLine;
		      }
		    }
		    context.fillText(line, x, y);

		    //Change format for signature
		    context.shadowColor = "#808080"
	        context.shadowOffsetX = 2;
	        context.shadowOffsetX = 2;
	        context.shadowBlur = 10;

		    var sigPosition = y + (2 * lineHeight)
	        context.fillText("Donald Trump", x, sigPosition)
		
			//Reset styling for next render
			 context.shadowColor = "#000000"
		}

		var can = this.refs.canvas;
		var context = can.getContext('2d');
		var textInput = this.props.textInput;
		var text = "A lot of people ask me about " + textInput +". And let me tell you folks. It's bad. It's so bad. Nobody can believe how bad it is."

	    context.shadowColor = "#000000"
        context.shadowOffsetX = 2;
        context.shadowOffsetX = 2;
        context.shadowBlur = 10;

		var quotation = new Image();
    	quotation.src = "<%= image_path('quotationmark.png')%>"
		var objectImg = new Image();
		var imgPath = "<%= image_path('Trump1.jpg') %>";
		objectImg.src = imgPath

		objectImg.onload = function(){
			draw();
			wrapText(context, text);
			context.drawImage(quotation, 19, 15)

			console.log('finish drawing')
			callback()

		}

		//This might not be necessary, but ensures quotation is drawn if loaded after image
		quotation.onload = function(){
			context.drawImage(quotation, 19, 15)
		}

		// this.refs.canvas.onload = function(){

		// 	console.log('canvas load and get data url')
		// 	var can = this.refs.canvas;
		// 	var dataURL = can.toDataURL();

		// 	var canvasImg = this.refs.canvasImage
		// 	canvasImg.src = dataURL
		// 	}
	},

	componentDidUpdate: function(){
		this._draw(this._copyToImage)

	},

	componentDidMount: function(){
		this._draw(this._copyToImage)

	},

  	render: function() {
    return (
    	<div className="canvas-container">
	    	<div height="600px">
			<canvas ref='canvas' width={867} height={488} />
			<img ref='canvasImage' id="mirror" style={{"height":"488px", "width":"867px"}} className="canvasImg" />
			</div>
		</div>
    );
  }
});
