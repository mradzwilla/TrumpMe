var ImageSelector = React.createClass({

	getInitialState: function(){
		return{
			imgState:  "<%= image_path('Trump1.jpg') %>"
		}
	},

	_draw: function(context, text){
		var draw = function(){
			context.drawImage(objectImg, 100, 100);
		}

		var wrapText =  function(context, text) {
		    var words = text.split(' ');
		    var line = '';
		    var x = 40
		    var y = 148
		    var maxWidth = 760
		    var lineHeight = 40

		    for(var n = 0; n < words.length; n++) {
		      var testLine = line + words[n] + ' ';
		      var metrics = context.measureText(testLine);
		      var testWidth = metrics.width;
		      if (testWidth > maxWidth && n > 0) {
		        context.fillText(line, x, y);
		        line = words[n] + ' ';
		        y += lineHeight;
		      }
		      else {
		        line = testLine;
		      }
		    }
		    context.fillText(line, x, y);
			}	
	 	// var can = this.refs.canvas;
	  //   var ctx = can.getContext('2d');

		var objectImg = new Image();
		var imgPath = this.state.imgState;
		objectImg.src = imgPath
		console.log('drawing ' + imgPath)

		objectImg.onload = function(){
			draw();
			wrapText(context, text)
		}
	},

	// wrapText: function(context, text) {
 //    var words = text.split(' ');
 //    var line = '';
 //    var x = 40
 //    var y = 148
 //    var maxWidth = 760
 //    var lineHeight = 40

 //    for(var n = 0; n < words.length; n++) {
 //      var testLine = line + words[n] + ' ';
 //      var metrics = context.measureText(testLine);
 //      var testWidth = metrics.width;
 //      if (testWidth > maxWidth && n > 0) {
 //        context.fillText(line, x, y);
 //        line = words[n] + ' ';
 //        y += lineHeight;
 //      }
 //      else {
 //        line = testLine;
 //      }
 //    }
 //    context.fillText(line, x, y);
	// },	

	componentDidUpdate: function(){

	var can = this.refs.canvas;
	var context = can.getContext('2d');
	var text = this.props.textInput

	this._draw(context, text);
	// this.wrapText(context, text)

	},
	componentDidMount: function(){

	var can = this.refs.canvas;
	var context = can.getContext('2d');

	this._draw(context);	
	logStuff();
	},

	_changePicState: function(imageLink){
		this.setState({imgState: imageLink})
	},

	_getThumbnails: function(){
		const thumbnailList = [
		{id: 1, imageLink: "<%= image_path('Trump1.jpg') %>"},
		{id: 2, imageLink: "<%= image_path('Trump3.jpg') %>"},
		{id: 3, imageLink: "<%= image_path('Trump7.jpg') %>"},
		]

		return thumbnailList.map((e) => {
			return (
				<ImageThumbnail key={e.id} imageLink={e.imageLink} onClick={this._changePicState}/>
				)
		});
	},

	render: function() {
	const thumbnails = this._getThumbnails()

	return (
		<div>
		{thumbnails}
		<canvas ref='canvas' width={867} height={600}/>
		</div>

	)
	}

});

var ImageThumbnail = React.createClass({

	_runPropFunc: function(){
		this.props.onClick(this.props.imageLink)
	},

	render: function(){
		return (
			<img key={this.props.id} src={this.props.imageLink} className="thumbnail" onClick={this._runPropFunc} />
			)
	}
})